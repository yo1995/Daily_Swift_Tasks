//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class DefaultAPI: APIBase {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func entriesGet(completion: ((data: [JournalEntry]?, error: ErrorType?) -> Void)) {
        entriesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /entries
     - examples: [{contentType=application/json, example=[ {
  "date" : 0.80082819046101150206595775671303272247314453125,
  "emoji" : "emoji",
  "id" : "id"
}, {
  "date" : 0.80082819046101150206595775671303272247314453125,
  "emoji" : "emoji",
  "id" : "id"
} ]}]

     - returns: RequestBuilder<[JournalEntry]> 
     */
    public class func entriesGetWithRequestBuilder() -> RequestBuilder<[JournalEntry]> {
        let path = "/entries"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[JournalEntry]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func entriesIdDelete(id id: String, completion: ((error: ErrorType?) -> Void)) {
        entriesIdDeleteWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - DELETE /entries/{id}
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    public class func entriesIdDeleteWithRequestBuilder(id id: String) -> RequestBuilder<Void> {
        var path = "/entries/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter input: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func entriesPost(input input: JournalEntry, completion: ((data: JournalEntry?, error: ErrorType?) -> Void)) {
        entriesPostWithRequestBuilder(input: input).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /entries
     - examples: [{contentType=application/json, example={
  "date" : 0.80082819046101150206595775671303272247314453125,
  "emoji" : "emoji",
  "id" : "id"
}}]
     
     - parameter input: (body)  

     - returns: RequestBuilder<JournalEntry> 
     */
    public class func entriesPostWithRequestBuilder(input input: JournalEntry) -> RequestBuilder<JournalEntry> {
        let path = "/entries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = input.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<JournalEntry>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func healthGet(completion: ((data: Status?, error: ErrorType?) -> Void)) {
        healthGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /health
     - examples: [{contentType=application/json, example={
  "details" : [ "details", "details" ],
  "status" : "status",
  "timestamp" : "timestamp"
}}]

     - returns: RequestBuilder<Status> 
     */
    public class func healthGetWithRequestBuilder() -> RequestBuilder<Status> {
        let path = "/health"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Status>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
